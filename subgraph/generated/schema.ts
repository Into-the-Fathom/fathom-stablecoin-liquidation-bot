// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Position", id.toString(), this);
    }
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get("Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get positionAddress(): Bytes {
    let value = this.get("positionAddress");
    return value!.toBytes();
  }

  set positionAddress(value: Bytes) {
    this.set("positionAddress", Value.fromBytes(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value!.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get walletAddress(): Bytes {
    let value = this.get("walletAddress");
    return value!.toBytes();
  }

  set walletAddress(value: Bytes) {
    this.set("walletAddress", Value.fromBytes(value));
  }

  get collatralPool(): Bytes {
    let value = this.get("collatralPool");
    return value!.toBytes();
  }

  set collatralPool(value: Bytes) {
    this.set("collatralPool", Value.fromBytes(value));
  }

  get positionId(): BigInt {
    let value = this.get("positionId");
    return value!.toBigInt();
  }

  set positionId(value: BigInt) {
    this.set("positionId", Value.fromBigInt(value));
  }

  get lockedCollateral(): BigInt {
    let value = this.get("lockedCollateral");
    return value!.toBigInt();
  }

  set lockedCollateral(value: BigInt) {
    this.set("lockedCollateral", Value.fromBigInt(value));
  }

  get debtShare(): BigInt {
    let value = this.get("debtShare");
    return value!.toBigInt();
  }

  set debtShare(value: BigInt) {
    this.set("debtShare", Value.fromBigInt(value));
  }

  get safetyBuffer(): BigInt {
    let value = this.get("safetyBuffer");
    return value!.toBigInt();
  }

  set safetyBuffer(value: BigInt) {
    this.set("safetyBuffer", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debtAccumulatedRate(): BigInt {
    let value = this.get("debtAccumulatedRate");
    return value!.toBigInt();
  }

  set debtAccumulatedRate(value: BigInt) {
    this.set("debtAccumulatedRate", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}
